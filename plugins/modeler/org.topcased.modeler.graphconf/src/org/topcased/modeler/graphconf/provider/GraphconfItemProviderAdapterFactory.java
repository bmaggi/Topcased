/**
 * <copyright>
 * </copyright>
 *
 * $Id: GraphconfItemProviderAdapterFactory.java,v 1.3 2006/12/18 14:54:16 jako Exp $
 */
package org.topcased.modeler.graphconf.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.topcased.modeler.graphconf.util.GraphconfAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class GraphconfItemProviderAdapterFactory extends GraphconfAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection supportedTypes = new ArrayList();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public GraphconfItemProviderAdapterFactory()
    {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.graphconf.DiagramGraphConf}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DiagramGraphConfItemProvider diagramGraphConfItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.graphconf.DiagramGraphConf}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createDiagramGraphConfAdapter()
    {
        if (diagramGraphConfItemProvider == null)
        {
            diagramGraphConfItemProvider = new DiagramGraphConfItemProvider(this);
        }

        return diagramGraphConfItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.graphconf.NodeGraphConf} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NodeGraphConfItemProvider nodeGraphConfItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.graphconf.NodeGraphConf}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter createNodeGraphConfAdapter()
    {
        if (nodeGraphConfItemProvider == null)
        {
            nodeGraphConfItemProvider = new NodeGraphConfItemProvider(this);
        }

        return nodeGraphConfItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.graphconf.EdgeGraphConf} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EdgeGraphConfItemProvider edgeGraphConfItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.graphconf.EdgeGraphConf}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter createEdgeGraphConfAdapter()
    {
        if (edgeGraphConfItemProvider == null)
        {
            edgeGraphConfItemProvider = new EdgeGraphConfItemProvider(this);
        }

        return edgeGraphConfItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.graphconf.EMFBridge} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EMFBridgeItemProvider emfBridgeItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.graphconf.EMFBridge}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter createEMFBridgeAdapter()
    {
        if (emfBridgeItemProvider == null)
        {
            emfBridgeItemProvider = new EMFBridgeItemProvider(this);
        }

        return emfBridgeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.graphconf.StringBridge} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StringBridgeItemProvider stringBridgeItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.graphconf.StringBridge}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter createStringBridgeAdapter()
    {
        if (stringBridgeItemProvider == null)
        {
            stringBridgeItemProvider = new StringBridgeItemProvider(this);
        }

        return stringBridgeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.graphconf.Constraint} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ConstraintItemProvider constraintItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.graphconf.Constraint}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter createConstraintAdapter()
    {
        if (constraintItemProvider == null)
        {
            constraintItemProvider = new ConstraintItemProvider(this);
        }

        return constraintItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class) type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose()
    {
        if (diagramGraphConfItemProvider != null)
            diagramGraphConfItemProvider.dispose();
        if (nodeGraphConfItemProvider != null)
            nodeGraphConfItemProvider.dispose();
        if (edgeGraphConfItemProvider != null)
            edgeGraphConfItemProvider.dispose();
        if (emfBridgeItemProvider != null)
            emfBridgeItemProvider.dispose();
        if (stringBridgeItemProvider != null)
            stringBridgeItemProvider.dispose();
        if (constraintItemProvider != null)
            constraintItemProvider.dispose();
    }

}

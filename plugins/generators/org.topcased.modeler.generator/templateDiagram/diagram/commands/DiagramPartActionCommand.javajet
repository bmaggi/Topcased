<%@ jet
	 package="org.topcased.modeler.generator.templates"
	 imports="org.topcased.modeler.diagramconfigurator.* org.topcased.modeler.diagramconfigurator.PartAction"
	 class="DiagramPartActionCommand"
	 version="$Id: DiagramPartActionCommand.javajet,v 1.1 2007/04/18 15:02:43 jako Exp $" %>
	 
<%PartAction partAction = (PartAction) argument;
	PartConfiguration partConfiguration = (PartConfiguration) partAction.eContainer();
	DiagramConfiguration diagramConfiguration = (DiagramConfiguration) partConfiguration.eContainer();
	ObjectConfiguration objectConfiguration = partConfiguration.getObject();
	String partPrefix = partConfiguration.getPrefix();
	String actionPrefix = partAction.getPrefix();%>
	
<%=diagramConfiguration.getJavaCopyrightText()%>

package <%=diagramConfiguration.getBasePackage()%>.commands;

import org.eclipse.gef.commands.Command;
import org.topcased.modeler.di.model.DiagramInterchangeFactory;
import org.topcased.modeler.di.model.GraphConnector;
import org.topcased.modeler.di.model.GraphEdge;
import org.topcased.modeler.di.model.GraphElement;
import org.topcased.modeler.di.model.GraphNode;
import org.topcased.modeler.utils.Utils;


/**
 * @generated
 */
public class <%=actionPrefix%>Command extends Command
{   
	
	/**
     * The the selected graph object
     * @generated
     */
    private <%if(partConfiguration instanceof NodePartConfiguration) {%>GraphNode<%}%><%if(partConfiguration instanceof EdgePartConfiguration) {%>GraphEdge<%}%> graphObject;
    
    /**
     * The Constructor
     * @generated
     */
    public <%=actionPrefix%>Command()
    {
        super("<%=partAction.getLabel()%>");
    }
    
    /**
     * Check if the command can be executed
     * 
     * @see org.eclipse.gef.commands.Command#canExecute()
     * @generated
     */
    public boolean canExecute()
    {
    	// TODO Add the checking conditions
        return true;
    }
    
    /**
	 * Refresh the graphical view
	 *
     * @see org.eclipse.gef.commands.Command#redo()
     * @generated
     */
    public void redo()
    {
        // TODO Add the redo() source
        redoModel();
    }
    
    /**
	 * Refresh the model objects
	 *
     * @see org.eclipse.gef.commands.Command#redoModel()
     * @generated
     */
    protected void redoModel()
    {
        // TODO Add the redoModel() source
    }
    
    /**
     * Execute the command
     * 
     * @see org.eclipse.gef.commands.Command#execute()
     * @generated
     */
    public void execute()
    {
        redo();
    }
    
    /**
	 * Restore the graphical view
	 *
     * @see org.eclipse.gef.commands.Command#undo()
     * @generated
     */
    public void undo()
    {
        // TODO Add the undo() source
        undoModel();
    }
    
    /**
	 * Restore the the model objects
	 *
     * @see org.eclipse.gef.commands.Command#undoModel()
     * @generated
     */
    protected void undoModel()
    {
    	// TODO Add the undoModel() source
    }
    
    /**
     * Set the edit part that supports the action
     * 
     * @param model the selected graph object
     * @return the given command
     * @generated
     */
    public Command setCurrentPart(Object model)
    {
    	<%if(partConfiguration instanceof NodePartConfiguration || partConfiguration instanceof EdgePartConfiguration) {%>
    	if (model instanceof <%if(partConfiguration instanceof NodePartConfiguration) {%>GraphNode<%}%><%if(partConfiguration instanceof EdgePartConfiguration) {%>GraphEdge<%}%>)
        {
            graphObject = (<%if(partConfiguration instanceof NodePartConfiguration) {%>GraphNode<%}%><%if(partConfiguration instanceof EdgePartConfiguration) {%>GraphEdge<%}%>) model;
            // TODO Add the settings procedure
            // If you have setted the procedure, uncomment the following line
            //return this;
        }
        
        <%}%>
        
        return null;
    }
    
}
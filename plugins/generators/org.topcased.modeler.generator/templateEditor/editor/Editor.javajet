<%@ jet
	 package="org.topcased.modeler.generator.templates"
	 imports="java.util.* org.topcased.modeler.editorconfigurator.* org.eclipse.emf.codegen.ecore.genmodel.*"
	 class="Editor"
	 version="$Id$" %>
<%EditorConfiguration editorConfiguration = (EditorConfiguration) argument;%>
<%=editorConfiguration.getJavaCopyrightText()%>
package <%=editorConfiguration.getProjectName()%>.editor;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ProjectScope;
import org.eclipse.core.runtime.Platform;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.preferences.ScopedPreferenceStore;
import org.eclipse.jface.preference.IPreferenceStore;
import org.osgi.service.prefs.BackingStoreException;
import org.osgi.service.prefs.Preferences;
import org.topcased.modeler.documentation.EAnnotationDocPage;
import org.topcased.modeler.documentation.IDocPage;
import org.topcased.modeler.editor.Modeler;
import <%=editorConfiguration.getProjectName()%>.<%=editorConfiguration.getPrefix()%>Plugin;

/**
 * Generated Model editor
 *
 * @generated
 */
public class <%=editorConfiguration.getPrefix()%>Editor extends Modeler
{
	
	public static final  String EDITOR_ID =  "<%=editorConfiguration.getProjectName()%>.editor.<%=editorConfiguration.getPrefix()%>Editor";
	
	/**
	 * @see org.topcased.modeler.editor.Modeler#getAdapterFactories()
	 * @generated
	 */
	protected List getAdapterFactories()
	{
		List factories = new ArrayList();
<%	Iterator itGenPackages = editorConfiguration.getGenModel().getAllGenPackagesWithClassifiers().iterator();
	while(itGenPackages.hasNext())
	{
		GenPackage genPack = (GenPackage) itGenPackages.next();%>
		factories.add(new <%=genPack.getQualifiedItemProviderAdapterFactoryClassName()%>());
        factories.add(new <%=editorConfiguration.getProjectName()%>.providers.<%=genPack.getPrefix()%>ModelerProviderAdapterFactory());
<%	}%>

		factories.addAll(super.getAdapterFactories());

		return factories;
	}

    /**
     * @see org.topcased.modeler.editor.Modeler#getId()
     * @generated
     */
	public String getId()
	{
		return EDITOR_ID;
	}
	
	/**
	 * @see org.topcased.modeler.editor.Modeler#getAdapter(java.lang.Class)
	 * @generated
     */
    public Object getAdapter(Class type)
    {
        if (type == IDocPage.class)
        {
            GEFtoEMFCommandStackWrapper stack = new GEFtoEMFCommandStackWrapper(getCommandStack());
            return new EAnnotationDocPage(stack);            
        }
        return super.getAdapter(type);
    }
    
    /**
	 * @see org.topcased.modeler.editor.Modeler#getPreferenceStore()
	 *
	 * @generated
     */
    public IPreferenceStore getPreferenceStore()
    {
        if(getEditorInput() instanceof IFileEditorInput){
	        IProject project = (((IFileEditorInput)getEditorInput()).getFile()).getProject();
	
	    	Preferences root = Platform.getPreferencesService().getRootNode();
	    	try {
				if (root.node(ProjectScope.SCOPE).node(project.getName()).nodeExists(<%=editorConfiguration.getPrefix()%>Plugin.getId()))
				{
					return new ScopedPreferenceStore(new ProjectScope(project), <%=editorConfiguration.getPrefix()%>Plugin.getId());
				}
			} catch (BackingStoreException e) {
				e.printStackTrace();
			}
		}
        return <%=editorConfiguration.getPrefix()%>Plugin.getDefault().getPreferenceStore();
    }

}

<%@ jet
	 package="org.topcased.modeler.generator.templates"
	 imports="java.util.* org.topcased.modeler.editorconfigurator.* org.eclipse.emf.codegen.ecore.genmodel.*"
	 class="ModelerProviderAdapterFactory"
	 version="$Id$" %>
<%	Map map = (Map) argument;
	GenPackage genPackage = (GenPackage) map.get("genPackage");
	EditorConfiguration editorConfiguration = (EditorConfiguration) map.get("editorConfiguration");
	String editorPath = editorConfiguration.getProjectName();%>
<%=editorConfiguration.getJavaCopyrightText()%>
package <%=editorPath%>.providers;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.topcased.modeler.providers.ILabelFeatureProvider;
import <%=genPackage.getAdapterFactoryClassName()%>;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances.
 * 
 * @generated
 */
public class <%=genPackage.getPrefix()%>ModelerProviderAdapterFactory extends <%=genPackage.getAdapterFactoryClassName()%> implements ComposeableAdapterFactory,
        IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * 
     * @generated
     */
    private ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * 
     * @generated
     */
    private IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * 
     * @generated
     */
    private Collection supportedTypes = new ArrayList();

<%	for (Iterator itGenClasses = genPackage.getGenClasses().iterator(); itGenClasses.hasNext();)
    {
    	GenClass genClass = (GenClass) itGenClasses.next();
    	String className = genClass.getName();%>
    /**
     * This keeps track of the one adapter used for all {@link <%=genClass.getQualifiedInterfaceName()%>} instances.
     * 
     * @generated
     */
    private <%=className%>ModelerProvider <%=className.toLowerCase()%>ModelerProvider;
    
<%	}%>

    /**
     * This constructs an instance.
     * 
     * @generated
     */
    public <%=genPackage.getPrefix()%>ModelerProviderAdapterFactory()
    {
        supportedTypes.add(ILabelFeatureProvider.class);
    }
    

    /**
     * This returns the root adapter factory that contains this factory.
     *
     * @return the root AdapterFactory
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     *
     * @param parentAdapterFactory the new parent adapter factory
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * @param type the type to test
     * @return true if supported
     * 
     * @generated
     */
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     *
     * @param notifier the notifier
     * @param type the object to adapt
     * @return the Adapter the created adatper
     * @generated
     */
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * @param object the object to adapt
     * @param type the type to adapt
     * @return the adapted Object
     * @generated
     */
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class) type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     *
     * @param notifyChangedListener the listener to add
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     *
     * @param notifyChangedListener the listener to remove
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     *
     * @param notification the notification to fire
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }


<%	for (Iterator itGenClasses = genPackage.getGenClasses().iterator(); itGenClasses.hasNext();)
    {
    	GenClass genClass = (GenClass) itGenClasses.next();
    	String className = genClass.getName();%>
    /**
     * This creates an adapter for a {@link <%=genClass.getQualifiedInterfaceName()%>}.
     *
     * @return the Adapter
     * @generated
     */
    public Adapter create<%=className%>Adapter()
    {
        if (<%=className.toLowerCase()%>ModelerProvider == null)
        {
            <%=className.toLowerCase()%>ModelerProvider = new <%=className%>ModelerProvider(this);
        }

        return <%=className.toLowerCase()%>ModelerProvider;
    }
    
<%	}%>

    /**
     * This disposes all of the item providers created by this factory.
     * 
     * @generated
     */
    public void dispose()
    {
<%	for (Iterator itGenClasses = genPackage.getGenClasses().iterator(); itGenClasses.hasNext();)
    {
    	GenClass genClass = (GenClass) itGenClasses.next();
    	String className = genClass.getName();%>
        if (<%=className.toLowerCase()%>ModelerProvider != null)
        {
            <%=className.toLowerCase()%>ModelerProvider.dispose();
        }
<%	}%>
    }

}

/**
 * <copyright>
 * </copyright>
 *
 * $Id: DiagramconfiguratorItemProviderAdapterFactory.java,v 1.9 2007/04/18 12:54:15 jako Exp $
 */
package org.topcased.modeler.diagramconfigurator.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.topcased.modeler.diagramconfigurator.util.DiagramconfiguratorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class DiagramconfiguratorItemProviderAdapterFactory extends DiagramconfiguratorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public DiagramconfiguratorItemProviderAdapterFactory()
    {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.DiagramConfiguration} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected DiagramConfigurationItemProvider diagramConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.DiagramConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDiagramConfigurationAdapter()
    {
        if (diagramConfigurationItemProvider == null)
        {
            diagramConfigurationItemProvider = new DiagramConfigurationItemProvider(this);
        }

        return diagramConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.DiagramReference} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected DiagramReferenceItemProvider diagramReferenceItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.DiagramReference}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDiagramReferenceAdapter()
    {
        if (diagramReferenceItemProvider == null)
        {
            diagramReferenceItemProvider = new DiagramReferenceItemProvider(this);
        }

        return diagramReferenceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.PaletteConfiguration} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected PaletteConfigurationItemProvider paletteConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.PaletteConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPaletteConfigurationAdapter()
    {
        if (paletteConfigurationItemProvider == null)
        {
            paletteConfigurationItemProvider = new PaletteConfigurationItemProvider(this);
        }

        return paletteConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.diagramconfigurator.PaletteCategory}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PaletteCategoryItemProvider paletteCategoryItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.PaletteCategory}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPaletteCategoryAdapter()
    {
        if (paletteCategoryItemProvider == null)
        {
            paletteCategoryItemProvider = new PaletteCategoryItemProvider(this);
        }

        return paletteCategoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.NodePartConfiguration} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected NodePartConfigurationItemProvider nodePartConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.NodePartConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNodePartConfigurationAdapter()
    {
        if (nodePartConfigurationItemProvider == null)
        {
            nodePartConfigurationItemProvider = new NodePartConfigurationItemProvider(this);
        }

        return nodePartConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.EdgePartConfiguration} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected EdgePartConfigurationItemProvider edgePartConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.EdgePartConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEdgePartConfigurationAdapter()
    {
        if (edgePartConfigurationItemProvider == null)
        {
            edgePartConfigurationItemProvider = new EdgePartConfigurationItemProvider(this);
        }

        return edgePartConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.diagramconfigurator.EdgeObject}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EdgeObjectItemProvider edgeObjectItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.EdgeObject}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEdgeObjectAdapter()
    {
        if (edgeObjectItemProvider == null)
        {
            edgeObjectItemProvider = new EdgeObjectItemProvider(this);
        }

        return edgeObjectItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.diagramconfigurator.PaletteItem}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PaletteItemItemProvider paletteItemItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.PaletteItem}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPaletteItemAdapter()
    {
        if (paletteItemItemProvider == null)
        {
            paletteItemItemProvider = new PaletteItemItemProvider(this);
        }

        return paletteItemItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.SourceTargetCouple} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected SourceTargetCoupleItemProvider sourceTargetCoupleItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.SourceTargetCouple}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSourceTargetCoupleAdapter()
    {
        if (sourceTargetCoupleItemProvider == null)
        {
            sourceTargetCoupleItemProvider = new SourceTargetCoupleItemProvider(this);
        }

        return sourceTargetCoupleItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.ModelObjectConfiguration} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected ModelObjectConfigurationItemProvider modelObjectConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.ModelObjectConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createModelObjectConfigurationAdapter()
    {
        if (modelObjectConfigurationItemProvider == null)
        {
            modelObjectConfigurationItemProvider = new ModelObjectConfigurationItemProvider(this);
        }

        return modelObjectConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.modeler.diagramconfigurator.SimpleObjectConfiguration} instances. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected SimpleObjectConfigurationItemProvider simpleObjectConfigurationItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.SimpleObjectConfiguration}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createSimpleObjectConfigurationAdapter()
    {
        if (simpleObjectConfigurationItemProvider == null)
        {
            simpleObjectConfigurationItemProvider = new SimpleObjectConfigurationItemProvider(this);
        }

        return simpleObjectConfigurationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.diagramconfigurator.Constraint}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ConstraintItemProvider constraintItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.Constraint}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createConstraintAdapter()
    {
        if (constraintItemProvider == null)
        {
            constraintItemProvider = new ConstraintItemProvider(this);
        }

        return constraintItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.modeler.diagramconfigurator.PartAction}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected PartActionItemProvider partActionItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.modeler.diagramconfigurator.PartAction}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createPartActionAdapter()
    {
        if (partActionItemProvider == null)
        {
            partActionItemProvider = new PartActionItemProvider(this);
        }

        return partActionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class< ? >) type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose()
    {
        if (diagramConfigurationItemProvider != null)
            diagramConfigurationItemProvider.dispose();
        if (diagramReferenceItemProvider != null)
            diagramReferenceItemProvider.dispose();
        if (paletteConfigurationItemProvider != null)
            paletteConfigurationItemProvider.dispose();
        if (paletteCategoryItemProvider != null)
            paletteCategoryItemProvider.dispose();
        if (nodePartConfigurationItemProvider != null)
            nodePartConfigurationItemProvider.dispose();
        if (edgePartConfigurationItemProvider != null)
            edgePartConfigurationItemProvider.dispose();
        if (edgeObjectItemProvider != null)
            edgeObjectItemProvider.dispose();
        if (paletteItemItemProvider != null)
            paletteItemItemProvider.dispose();
        if (sourceTargetCoupleItemProvider != null)
            sourceTargetCoupleItemProvider.dispose();
        if (modelObjectConfigurationItemProvider != null)
            modelObjectConfigurationItemProvider.dispose();
        if (simpleObjectConfigurationItemProvider != null)
            simpleObjectConfigurationItemProvider.dispose();
        if (constraintItemProvider != null)
            constraintItemProvider.dispose();
        if (partActionItemProvider != null)
            partActionItemProvider.dispose();
    }

}
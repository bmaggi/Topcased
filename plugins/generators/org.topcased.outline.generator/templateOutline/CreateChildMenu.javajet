<%@ jet
	 package="org.topcased.outline.generator.templates"
	 imports="java.util.* org.topcased.outline.configurator.* org.eclipse.emf.codegen.ecore.genmodel.*"
	 class="CreateChildMenu"
	 version="$Id: CreateChildMenu.javajet,v 1.3 2006/12/20 17:08:26 jako Exp $" %>
<%@ include file="cartoucheAirbus.txt"%>
<% OutlineConfiguration outlineConfig = (OutlineConfiguration) argument;
CreateChildMenuConfiguration config = outlineConfig.getCreateChild(); %>
package <%= config.getMenuPackageName()%>;

import java.util.Collection;
import java.util.Iterator;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.topcased.modeler.actions.CreateChildAction;
import org.topcased.modeler.editor.MixedEditDomain;
import org.topcased.modeler.editor.outline.ICreateChildMenu;
import <%= outlineConfig.getGenPackage().getUtilitiesPackageName() %>.<%= outlineConfig.getGenPackage().getSwitchClassName() %>;
import <%= outlineConfig.getUtilitiesPackageName() %>.Exact<%= outlineConfig.getGenPackage().getSwitchClassName() %>;

/**
 * A customized 'Create child' menu manager.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class <%= config.getClassName() %> extends MenuManager implements ICreateChildMenu
{
	/**
	 * @generated
	 */
	private static final String UNAPPLIED_ACTIONS_GROUP = "unappliedActions";
	
	/**
	 * @generated
	 */
    private MixedEditDomain domain;

	/**
	 * @generated
	 */
    private EObject selectedObject;

	/**
	 * @generated
	 */
    private Collection descriptors;
    
    /**
	 * @generated
	 */
    private MenuManager thisMenu;

	<% for (Iterator it = config.eAllContents(); it.hasNext(); )
	{
		MenuItem item = (MenuItem) it.next();
		if (item instanceof Menu)
		{ %>
			/**
			 * The '<%= ((Menu) item).getName() %>' menu manager.
			 * @generated
			 */
			private MenuManager <%= ((Menu) item).getId() %>Menu;
		<% }
	} %>

	/**
	 * Constructor.
	 * @generated
	 */
    public <%= config.getClassName() %>()
    {
        super("Create child");
        thisMenu = this;
    }

	/**
     * @see org.topcased.modeler.editor.outline.ICreateChildMenu#setMixedEditDomain(org.topcased.modeler.editor.MixedEditDomain)
     */
    public void setMixedEditDomain(MixedEditDomain domain)
    {
        this.domain = domain;
    }

    /**
     * @see org.topcased.modeler.editor.outline.ICreateChildMenu#setSelectedEObject(org.eclipse.emf.ecore.EObject)
     */
    public void setSelectedEObject(EObject object)
    {
        selectedObject = object;
    }

    /**
     * Creates this menu contents.<br>
	 * It creates the menu structure and add all the create child actions.<br> 
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 *
     * @generated
     */
    public void createMenuContents()
    {
    	this.descriptors = domain.getEMFEditingDomain().getNewChildDescriptors(selectedObject, null);
        createMenus(this);

        for (Iterator it = descriptors.iterator(); it.hasNext();)
        {
            CommandParameter descriptor = (CommandParameter) it.next();
            EObject child = (EObject) descriptor.getValue();
            CreateChildAction action = new CreateChildAction(domain, selectedObject, descriptor);

			boolean added = false;
			<% for (Iterator it = config.getItems().iterator(); it.hasNext(); )
			{
				MenuItem item = (MenuItem) it.next();
				if (item instanceof Menu)
				{ %>            
            		added = addTo<%= ((Menu) item).getId() %>Menu(child, action) || added; 
            	<% }
            	else if (item instanceof MenuGroup)
            	{ %>
            		added = addTo<%= ((MenuGroup) item).getId() %>Group(child, action) || added;
            	<% }
        	} %>
            if (!added)
            {
                appendToGroup(UNAPPLIED_ACTIONS_GROUP, action);
            }
        }
    }

	/**
     * Create this menu structure. <br>
	 * It creates all the menus and groups.<br>
     * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
	 *
     * @param menu the create child menu manager 
     * @generated
     */
    protected void createMenus(MenuManager menu)
    {
    	<% for (Iterator it = config.eAllContents(); it.hasNext(); )
    	{
    		MenuItem item = (MenuItem) it.next();
    		if (item instanceof Menu)
    		{ 
    			Menu menu = (Menu) item; %>
    			<%= menu.getId() %>Menu = new MenuManager("<%= menu.getName() %>");
    			<% MenuGroup parent = menu.getParent();
    			if (parent == null)
    			{ %>
    				menu.add(<%= menu.getId() %>Menu);
    			<% }
    			else if (parent instanceof Menu)
    			{ %>
    				<%= parent.getId() %>Menu.add(<%= menu.getId() %>Menu);
    			<% }
    			else
    			{
        			while (!(parent instanceof Menu))
        			{
        				parent = parent.getParent();
        			}
        			if (parent == null)
        			{ %>
        				menu.add(<%= menu.getId() %>Menu);
        			<% }
        			else if (parent instanceof Menu)
        			{ %>
        				<%= parent.getId() %>Menu.appendToGroup("<%= menu.getParent().getId() %>", <%= menu.getId() %>Menu);
        			<% }
        		}
			}
    		else if (item instanceof MenuGroup)
    		{
    			MenuGroup group = (MenuGroup) item; %>
    			Separator <%= group.getId() %>Group = new Separator("<%= group.getId() %>");
    			<% MenuGroup parent = group.getParent();
    			if (parent == null)
    			{ %>
    				menu.add(<%= group.getId() %>Group);
    			<% }
    			else if (parent instanceof Menu)
    			{ %>
    				<%= parent.getId() %>Menu.add(<%= group.getId() %>Group);
    			<% }
    			else
    			{
        			while (!(parent instanceof Menu))
        			{
        				parent = parent.getParent();
        			}
        			if (parent == null)
        			{ %>
        				menu.add(<%= group.getId() %>Group);
        			<% }
        			else if (parent instanceof Menu)
        			{ %>
        				<%= parent.getId() %>Menu.add(<%= group.getId() %>Group);
        			<% }
        		}
    		}
    	} %>
    	// Group containing non sorted actions. 
		menu.add(new Separator(UNAPPLIED_ACTIONS_GROUP));	
    }

	<% for (Iterator it = config.eAllContents(); it.hasNext(); )
	{
		MenuItem item = (MenuItem) it.next();
		String type = null;
		if (item instanceof MenuGroup)
		{
			MenuGroup group = (MenuGroup) item;
			type = "Group";
			if (item instanceof Menu)
			{
				type = "Menu";
			} %>
    		/**
			 * Tries to add for the given child object the associated action to the
			 * '<%= group.getId() %>' <%= type.toLowerCase() %>.<br>
			 * If this <%= type.toLowerCase() %> has groups or submenus, it also tries to add the action in each
			 * of them.<br>
			 * <!-- begin-user-doc -->
 	 		 * <!-- end-user-doc -->
 			 *
         	 * @param child the child object for the one the action must be added
         	 * @param childAction the action to add
         	 * @return <code>true</code> if the given action has been added to this <%= type.toLowerCase() %> or one
			 * of its groups or submenus, or <code>false</code> otherwise.
			 * @generated
         	 */
         	 private boolean addTo<%= group.getId() %><%= type.toString() %>(EObject child, CreateChildAction childAction)
         	 {
         	 	boolean added = false;
         	 	final CreateChildAction action = childAction;
         	 	<% if (group.hasExactCreateChildActions())
         	 	{ %>
             	 	Object exactResult = new Exact<%= outlineConfig.getGenPackage().getSwitchClassName() %>()
             	 	{
             	 	<% for (Iterator actions = group.getItems().iterator(); actions.hasNext(); )
             	 	{
             	 		MenuItem childItem = (MenuItem) actions.next();
             	 		if (childItem instanceof CreateChildAction)
             	 		{
             	 			CreateChildAction action = (CreateChildAction) childItem;
             	 			if (action.getType() == ChildActionType.EXACT_LITERAL)
             	 			{ %>
             	 				public Object case<%= action.getClass_().getInterfaceName() %>(<%= action.getClass_().getGenPackage().getInterfacePackageName() %>.<%= action.getClass_().getInterfaceName() %> object)
             	 				{
             	 					<% MenuGroup parent = action.getParent();
             	 					if (parent == null)
                        			{ %>
                        				menu.add(action);
                        			<% }
                        			else if (parent instanceof Menu)
                        			{ %>
                        				<%= parent.getId() %>Menu.add(action);
                        			<% }
                        			else
                        			{
                            			while (parent != null && !(parent instanceof Menu))
                            			{
                            				parent = parent.getParent();
                            			}
                            			if (parent == null)
                            			{ %>
                            				thisMenu.appendToGroup("<%= action.getParent().getId() %>", action);
                            			<% }
                            			else if (parent instanceof Menu)
                            			{ %>
                            				<%= parent.getId() %>Menu.appendToGroup("<%= action.getParent().getId() %>", action);
                            			<% }
                            		} %> 
             	 					return action;
             	 				}
             	 			<% }
             	 		}
             	 	} %>
             	 	}.doSwitch(child);
             	 	added = added || (exactResult == action);
             	<% } %>
         	 	
         	 	<% if (group.hasHierarchicalCreateChildActions())
         	 	{ %>
             	 	Object hierarchicalResult = new <%= outlineConfig.getGenPackage().getSwitchClassName() %>()
             	 	{
             	 	
             	 	<% for (Iterator actions = group.getItems().iterator(); actions.hasNext(); )
             	 	{
             	 		MenuItem childItem = (MenuItem) actions.next();
             	 		if (childItem instanceof CreateChildAction)
             	 		{
             	 			CreateChildAction action = (CreateChildAction) childItem;
             	 			if (action.getType() == ChildActionType.HIERACHICAL_LITERAL)
             	 			{ %>
             	 				public Object case<%= action.getClass_().getInterfaceName() %>(<%= action.getClass_().getGenPackage().getInterfacePackageName() %>.<%= action.getClass_().getInterfaceName() %> object)
             	 				{
             	 					<% MenuGroup parent = action.getParent();
             	 					if (parent == null)
                        			{ %>
                        				menu.add(action);
                        			<% }
                        			else if (parent instanceof Menu)
                        			{ %>
                        				<%= parent.getId() %>Menu.add(action);
                        			<% }
                        			else
                        			{
                            			while (parent != null && !(parent instanceof Menu))
                            			{
                            				parent = parent.getParent();
                            			}
                            			if (parent == null)
                            			{ %>
                            				thisMenu.appendToGroup("<%= action.getParent().getId() %>", action);
                            			<% }
                            			else if (parent instanceof Menu)
                            			{ %>
                            				<%= parent.getId() %>Menu.appendToGroup("<%= action.getParent().getId() %>", action);
                            			<% }
                            		} %> 
             	 					return action;
             	 				}
             	 			<% }
             	 		}
             	 	} %>
             	 	}.doSwitch(child);
             	 	added = added || (hierarchicalResult == action);
				<% } %>
         	 	<% for (Iterator groups = group.getItems().iterator(); groups.hasNext(); )
         	 	{
         	 		MenuItem childItem = (MenuItem) groups.next();
         	 		if (childItem instanceof Menu)
    				{ %>            
                		added = addTo<%= ((Menu) childItem).getId() %>Menu(child, action) || added;
                	<% }
                	else if (childItem instanceof MenuGroup)
                	{ %>
                		added = addTo<%= ((MenuGroup) childItem).getId() %>Group(child, action) || added;
                	<% }
         	 	
         	 	} %>
         	 	return added;
         	 }
		<% }
	} %>
}

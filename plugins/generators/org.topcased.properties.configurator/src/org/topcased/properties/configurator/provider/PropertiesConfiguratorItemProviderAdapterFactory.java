/**
 * <copyright>
 * </copyright>
 *
 * $Id: PropertiesConfiguratorItemProviderAdapterFactory.java,v 1.2 2006/12/19 10:05:51 jako Exp $
 */
package org.topcased.properties.configurator.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.topcased.properties.configurator.util.PropertiesConfiguratorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class PropertiesConfiguratorItemProviderAdapterFactory extends PropertiesConfiguratorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection supportedTypes = new ArrayList();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public PropertiesConfiguratorItemProviderAdapterFactory()
    {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.properties.configurator.TabbedView}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected TabbedViewItemProvider tabbedViewItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.properties.configurator.TabbedView}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createTabbedViewAdapter()
    {
        if (tabbedViewItemProvider == null)
        {
            tabbedViewItemProvider = new TabbedViewItemProvider(this);
        }

        return tabbedViewItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.properties.configurator.Tab} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected TabItemProvider tabItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.properties.configurator.Tab}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter createTabAdapter()
    {
        if (tabItemProvider == null)
        {
            tabItemProvider = new TabItemProvider(this);
        }

        return tabItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.properties.configurator.Category} instances.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CategoryItemProvider categoryItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.properties.configurator.Category}. <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createCategoryAdapter()
    {
        if (categoryItemProvider == null)
        {
            categoryItemProvider = new CategoryItemProvider(this);
        }

        return categoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.properties.configurator.SingleFeatureSection} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected SingleFeatureSectionItemProvider singleFeatureSectionItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.properties.configurator.SingleFeatureSection}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createSingleFeatureSectionAdapter()
    {
        if (singleFeatureSectionItemProvider == null)
        {
            singleFeatureSectionItemProvider = new SingleFeatureSectionItemProvider(this);
        }

        return singleFeatureSectionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.topcased.properties.configurator.MultipleFeatureSection} instances. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected MultipleFeatureSectionItemProvider multipleFeatureSectionItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.properties.configurator.MultipleFeatureSection}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createMultipleFeatureSectionAdapter()
    {
        if (multipleFeatureSectionItemProvider == null)
        {
            multipleFeatureSectionItemProvider = new MultipleFeatureSectionItemProvider(this);
        }

        return multipleFeatureSectionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.topcased.properties.configurator.AdvancedSection}
     * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected AdvancedSectionItemProvider advancedSectionItemProvider;

    /**
     * This creates an adapter for a {@link org.topcased.properties.configurator.AdvancedSection}. <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createAdvancedSectionAdapter()
    {
        if (advancedSectionItemProvider == null)
        {
            advancedSectionItemProvider = new AdvancedSectionItemProvider(this);
        }

        return advancedSectionItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class) type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose()
    {
        if (tabbedViewItemProvider != null)
            tabbedViewItemProvider.dispose();
        if (tabItemProvider != null)
            tabItemProvider.dispose();
        if (categoryItemProvider != null)
            categoryItemProvider.dispose();
        if (singleFeatureSectionItemProvider != null)
            singleFeatureSectionItemProvider.dispose();
        if (multipleFeatureSectionItemProvider != null)
            multipleFeatureSectionItemProvider.dispose();
        if (advancedSectionItemProvider != null)
            advancedSectionItemProvider.dispose();
    }

}
